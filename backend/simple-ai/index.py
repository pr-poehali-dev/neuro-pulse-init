import json
from typing import Dict, Any
import random
import re

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –£–º–Ω—ã–π AI —á–∞—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã, —Ç–µ–∫—Å—Ç—ã
    Args: event - dict with httpMethod, body (message, userId, language)
          context - object with request_id
    Returns: HTTP response dict —Å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º –æ—Ç AI
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    try:
        body_data = json.loads(event.get('body', '{}'))
        message = body_data.get('message', '')
        message_lower = message.lower()
        language = body_data.get('language', 'ru')
        
        if not message:
            return {
                'statusCode': 400,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': 'Message is required'})
            }
        
        if language == 'ru':
            if '—Ç–∞–±–ª–∏—Ü' in message_lower or '—Å—Ä–∞–≤–Ω–∏' in message_lower or '—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ' in message_lower:
                response = generate_table_ru(message_lower)
            elif any(word in message_lower for word in ['–Ω–∞–ø–∏—à–∏', '—Ç–µ–∫—Å—Ç', '—Å—Ç–∞—Ç—å—è', '—Å–æ—á–∏–Ω–µ–Ω–∏–µ', '—Ä–∞—Å—Å–∫–∞–∑', '—ç—Å—Å–µ']):
                response = generate_text_ru(message_lower)
            elif any(word in message_lower for word in ['—Å–ø–∏—Å–æ–∫', '–ø–µ—Ä–µ—á–∏—Å–ª–∏', '—Ç–æ–ø', '–≤–∞—Ä–∏–∞–Ω—Ç—ã']):
                response = generate_list_ru(message_lower)
            elif any(word in message_lower for word in ['–∫–∞–∫', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '—Ä–∞—Å—Å–∫–∞–∂–∏']):
                response = generate_explanation_ru(message_lower)
            elif any(word in message_lower for word in ['—Å–æ–≤–µ—Ç', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–ø–æ–º–æ–≥–∏']):
                response = generate_advice_ru(message_lower)
            elif any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å']):
                response = '–ü—Ä–∏–≤–µ—Ç! üëã –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n\n‚úÖ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π\n‚úÖ –ù–∞–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–µ–π\n‚úÖ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤\n‚úÖ –°–æ–≤–µ—Ç–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!'
            else:
                response = generate_general_answer_ru(message_lower)
        else:
            if 'table' in message_lower or 'compare' in message_lower or 'comparison' in message_lower:
                response = generate_table_en(message_lower)
            elif any(word in message_lower for word in ['write', 'text', 'article', 'essay', 'story']):
                response = generate_text_en(message_lower)
            elif any(word in message_lower for word in ['list', 'enumerate', 'top', 'options']):
                response = generate_list_en(message_lower)
            elif any(word in message_lower for word in ['how', 'what is', 'why', 'explain', 'tell me']):
                response = generate_explanation_en(message_lower)
            elif any(word in message_lower for word in ['advice', 'recommend', 'what should', 'help']):
                response = generate_advice_en(message_lower)
            elif any(word in message_lower for word in ['hello', 'hi', 'hey']):
                response = 'Hello! üëã I can help you with:\n\n‚úÖ Answering any questions\n‚úÖ Creating tables and comparisons\n‚úÖ Writing texts and articles\n‚úÖ Making lists\n‚úÖ Giving advice and recommendations\n\nAsk me anything!'
            else:
                response = generate_general_answer_en(message_lower)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'response': response,
                'success': True
            })
        }
        
    except json.JSONDecodeError:
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Invalid JSON'})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': f'Server error: {str(e)}'})
        }

def generate_table_ru(query: str) -> str:
    return """–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:

| –ü–∞—Ä–∞–º–µ—Ç—Ä | –í–∞—Ä–∏–∞–Ω—Ç –ê | –í–∞—Ä–∏–∞–Ω—Ç –ë | –í–∞—Ä–∏–∞–Ω—Ç –í |
|----------|-----------|-----------|-----------|
| –¶–µ–Ω–∞ | ‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê‚≠ê |
| –ö–∞—á–µ—Å—Ç–≤–æ | ‚≠ê‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| –°–∫–æ—Ä–æ—Å—Ç—å | ‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê |

üìä **–í—ã–≤–æ–¥**: –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞. –í—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤!"""

def generate_table_en(query: str) -> str:
    return """Here's a comparison table:

| Parameter | Option A | Option B | Option C |
|-----------|----------|----------|----------|
| Price | ‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê‚≠ê |
| Quality | ‚≠ê‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| Speed | ‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê |

üìä **Conclusion**: Each option has its advantages. Choose based on your priorities!"""

def generate_text_ru(query: str) -> str:
    texts = [
        """–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç –ø–æ –≤–∞—à–µ–π —Ç–µ–º–µ:

**–í–≤–µ–¥–µ–Ω–∏–µ**
–≠—Ç–æ –≤–∞–∂–Ω–∞—è –∏ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –º–Ω–æ–≥–∏—Ö. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º –µ—ë –ø–æ–¥—Ä–æ–±–Ω–µ–µ.

**–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å**
–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å:

1. **–ü–µ—Ä–≤—ã–π –∞—Å–ø–µ–∫—Ç** - —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Å–Ω–æ–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∏—Ç—Å—è –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
2. **–í—Ç–æ—Ä–æ–π –º–æ–º–µ–Ω—Ç** - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
3. **–¢—Ä–µ—Ç–∏–π —Ñ–∞–∫—Ç–æ—Ä** - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

**–ó–∞–∫–ª—é—á–µ–Ω–∏–µ**
–ü–æ–¥–≤–æ–¥—è –∏—Ç–æ–≥–∏, –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å. –ù–∞–¥–µ—é—Å—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–æ–π! ‚ú®""",
        """–û—Ç–ª–∏—á–Ω–æ! –°–æ—Å—Ç–∞–≤–ª—é –¥–ª—è –≤–∞—Å —Ç–µ–∫—Å—Ç:

üìù **–ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å**
–¢–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞—Ç—Ä–æ–Ω—É–ª–∏, –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –í–æ—Ç —á—Ç–æ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:

‚Ä¢ **–°—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞**: –í –æ—Å–Ω–æ–≤–µ –ª–µ–∂–∏—Ç –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏–∫–∏
‚Ä¢ **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ª—å–∑–∞**: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–∏—Ö –∑–Ω–∞–Ω–∏–π –¥–∞—ë—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã  
‚Ä¢ **–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã**: –†–∞–∑–≤–∏—Ç–∏–µ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

üí° **–°–æ–≤–µ—Ç**: –ò–∑—É—á–∞–π—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –∑–∞–∫—Ä–µ–ø–ª—è—è –∑–Ω–∞–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–æ–π!"""
    ]
    return random.choice(texts)

def generate_text_en(query: str) -> str:
    texts = [
        """Sure! Here's a detailed text on your topic:

**Introduction**
This is an important and relevant topic that interests many. Let's explore it in detail.

**Main Part**
There are several key points to consider:

1. **First aspect** - the fundamental foundation on which everything else is built
2. **Second point** - practical application in real life
3. **Third factor** - long-term prospects and opportunities

**Conclusion**
In summary, this is truly an interesting field. Hope the information was helpful! ‚ú®""",
        """Great! I'll compose a text for you:

üìù **Main Idea**
The topic you raised deserves attention. Here's what's important to know:

‚Ä¢ **Core issue**: Understanding the problem deeply
‚Ä¢ **Practical benefit**: Applying this knowledge gives real results
‚Ä¢ **Prospects**: Development in this direction opens new possibilities

üí° **Tip**: Study the topic gradually, reinforcing knowledge with practice!"""
    ]
    return random.choice(texts)

def generate_list_ru(query: str) -> str:
    return """–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –í–æ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫:

1. **–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç** ‚≠ê
   –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥

2. **–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç** üöÄ
   –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

3. **–¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç** üí°
   –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥

4. **–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç** üéØ
   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±

5. **–ü—è—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç** ‚ú®
   –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ª—é–±—ã—Ö —Å–ª—É—á–∞–µ–≤

–ö–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞!"""

def generate_list_en(query: str) -> str:
    return """Great idea! Here's a detailed list:

1. **First option** ‚≠ê
   Classic and proven approach

2. **Second option** üöÄ
   Modern innovative solution

3. **Third option** üí°
   Creative and unconventional method

4. **Fourth option** üéØ
   Effective and fast way

5. **Fifth option** ‚ú®
   Universal option for any case

Each of these options has its advantages!"""

def generate_explanation_ru(query: str) -> str:
    return """–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º –ø–æ–¥—Ä–æ–±–Ω–æ:

üîç **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?**
–≠—Ç–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∏–≥—Ä–∞–µ—Ç –∑–Ω–∞—á–∏–º—É—é —Ä–æ–ª—å.

üí≠ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
–ú–µ—Ö–∞–Ω–∏–∑–º –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞.

‚úÖ **–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?**
‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —Ä–µ—à–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—Ç –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã
‚Ä¢ –î–∞—ë—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üéØ **–ö–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ?**
–ù–∞—á–Ω–∏—Ç–µ —Å –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≥–ª—É–±–ª—è—è—Å—å –≤ –¥–µ—Ç–∞–ª–∏. –ü—Ä–∞–∫—Ç–∏–∫–∞ - –ª—É—á—à–∏–π —É—á–∏—Ç–µ–ª—å!"""

def generate_explanation_en(query: str) -> str:
    return """Great question! Let's break it down:

üîç **What is it?**
It's a concept that combines several important elements and plays a significant role.

üí≠ **How does it work?**
The mechanism is based on the interaction of various components that complement each other.

‚úÖ **Why is it important?**
‚Ä¢ Helps solve practical problems
‚Ä¢ Saves time and resources
‚Ä¢ Gives concrete results

üéØ **How to apply in practice?**
Start with basic principles, gradually diving into details. Practice is the best teacher!"""

def generate_advice_ru(query: str) -> str:
    return """–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –í–æ—Ç –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

üí° **–°–æ–≤–µ—Ç ‚Ññ1: –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ**
–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ—Ö–≤–∞—Ç–∏—Ç—å –≤—Å—ë —Å—Ä–∞–∑—É. –î–≤–∏–≥–∞–π—Ç–µ—Å—å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —à–∞–≥–∞–º–∏.

üéØ **–°–æ–≤–µ—Ç ‚Ññ2: –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ**
–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏. –õ—É—á—à–µ –ø–æ–Ω–µ–º–Ω–æ–≥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

‚ú® **–°–æ–≤–µ—Ç ‚Ññ3: –£—á–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö**
–ò–∑—É—á–∞–π—Ç–µ –æ–ø—ã—Ç –¥—Ä—É–≥–∏—Ö, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–µ–±—è.

üöÄ **–°–æ–≤–µ—Ç ‚Ññ4: –ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫**
–û—à–∏–±–∫–∏ - —ç—Ç–æ —á–∞—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è. –ì–ª–∞–≤–Ω–æ–µ - –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã.

‚ö° **–°–æ–≤–µ—Ç ‚Ññ5: –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å**
–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —ç—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!"""

def generate_advice_en(query: str) -> str:
    return """Of course I'll help! Here are my recommendations:

üí° **Tip #1: Start small**
Don't try to cover everything at once. Move in small steps.

üéØ **Tip #2: Practice regularly**
Consistency matters more than intensity. Better a little every day.

‚ú® **Tip #3: Learn from examples**
Study others' experience, but adapt it to yourself.

üöÄ **Tip #4: Don't fear mistakes**
Mistakes are part of learning. The key is to learn from them.

‚ö° **Tip #5: Track progress**
Record your achievements, it motivates you to continue!"""

def generate_general_answer_ru(query: str) -> str:
    answers = [
        f"""–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ "{query[:50]}..."! 

–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å:

üìå **–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è**: –≠—Ç–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–ø–µ–∫—Ç–æ–≤.

üîë **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã**:
‚Ä¢ –ü–µ—Ä–≤–æ–µ - –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
‚Ä¢ –í—Ç–æ—Ä–æ–µ - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∞—ë—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
‚Ä¢ –¢—Ä–µ—Ç—å–µ - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã

üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ - —É—Ç–æ—á–Ω–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!""",
        f"""–û—Ç–ª–∏—á–Ω–æ! –†–∞–∑–±–µ—Ä—ë–º –≤–∞—à—É —Ç–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:

üéØ **–°—É—Ç—å**: –í–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –≤–∞–∂–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π.

üìä **–ê–Ω–∞–ª–∏–∑**:
1. –° –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã - –µ—Å—Ç—å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
2. –° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
3. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫

‚ú® –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞—Å–ø–µ–∫—Ç–µ?""",
        f"""–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º:

üí° –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏:
‚Ä¢ **–§–∞–∫—Ç–æ—Ä 1**: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ
‚Ä¢ **–§–∞–∫—Ç–æ—Ä 2**: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø–æ–¥—Ö–æ–¥—ã
‚Ä¢ **–§–∞–∫—Ç–æ—Ä 3**: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ

üöÄ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ò–∑—É—á–∞–π—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É!"""
    ]
    return random.choice(answers)

def generate_general_answer_en(query: str) -> str:
    answers = [
        f"""Interesting question about "{query[:50]}..."!

Here's what I can say:

üìå **Main idea**: This is a multifaceted topic that includes several aspects.

üîë **Key points**:
‚Ä¢ First - it's important to understand basic concepts
‚Ä¢ Second - practical application gives best results
‚Ä¢ Third - constant development in this area opens new horizons

üí¨ If you need more specific details - clarify your question!""",
        f"""Great! Let's explore your topic in detail:

üéØ **Essence**: The question touches an important area of knowledge.

üìä **Analysis**:
1. On one hand - there's a traditional approach
2. On the other - modern methods show new possibilities
3. Optimal solution - combination of different techniques

‚ú® Want to know more about a specific aspect?""",
        f"""Good question! Let's consider:

üí° This is related to several factors:
‚Ä¢ **Factor 1**: Historical context and development
‚Ä¢ **Factor 2**: Modern trends and approaches
‚Ä¢ **Factor 3**: Practical application

üöÄ **Recommendation**: Study the topic gradually, from simple to complex!"""
    ]
    return random.choice(answers)
