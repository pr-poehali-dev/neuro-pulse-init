import json
from typing import Dict, Any
import random

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –ü—Ä–æ—Å—Ç–æ–π AI —á–∞—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API, —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö
    Args: event - dict with httpMethod, body (message, userId, language)
          context - object with request_id
    Returns: HTTP response dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç AI
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    try:
        body_data = json.loads(event.get('body', '{}'))
        message = body_data.get('message', '').lower()
        language = body_data.get('language', 'ru')
        
        if not message:
            return {
                'statusCode': 400,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': 'Message is required'})
            }
        
        responses_ru = {
            '–ø—Ä–∏–≤–µ—Ç': [
                '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üëã',
                '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! üòä',
                '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! ‚ú®'
            ],
            '–∫–∞–∫ –¥–µ–ª–∞': [
                '–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º! üöÄ',
                '–í—Å—ë –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω? üòä',
                '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã! ‚ö°'
            ],
            '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å': [
                '–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è! ü§ñ',
                '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ—à–µ–Ω–∏—è! üí°',
                '–ú–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—ä—è—Å–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É! üéØ'
            ],
            '—Å–ø–∞—Å–∏–±–æ': [
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å! üòä',
                '–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º! üåü',
                '–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â—ë! üëç'
            ],
            '–ø–æ–º–æ—â—å': [
                '–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å! ü§ù',
                '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º! –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üí™',
                '–° —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ? üéØ'
            ]
        }
        
        responses_en = {
            'hello': [
                'Hello! How can I help you? üëã',
                'Hi there! Ready to answer your questions! üòä',
                'Hello! Nice to see you! ‚ú®'
            ],
            'how are you': [
                'Great! Ready to help you! üöÄ',
                'Doing wonderful! How can I assist? üòä',
                'Excellent! Ask me anything! ‚ö°'
            ],
            'what can you do': [
                'I can answer questions, help with information, and chat! ü§ñ',
                'I\'m here to help you find answers and solutions! üí°',
                'I can answer questions, explain concepts, and chat! üéØ'
            ],
            'thank you': [
                'You\'re welcome! Glad to help! üòä',
                'Always happy to help! üåü',
                'Feel free to ask more! üëç'
            ],
            'help': [
                'Sure! What do you need help with? ü§ù',
                'I\'m here to help! What interests you? üí™',
                'Happy to help! Tell me what you need? üéØ'
            ]
        }
        
        default_responses_ru = [
            '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å... ü§î',
            '–≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ç–µ–º–∞! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üí≠',
            '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É –ø–æ–∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. üîç',
            '–ü–æ–Ω–∏–º–∞—é! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ? üåü',
            '–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µ. üéØ'
        ]
        
        default_responses_en = [
            'Interesting question! Let me think... ü§î',
            'That\'s a fascinating topic! What specifically interests you? üí≠',
            'Great question! I can search for information on this. üîç',
            'I see! That\'s really interesting. Tell me more? üåü',
            'Good question! Let\'s figure it out together. üéØ'
        ]
        
        responses = responses_ru if language == 'ru' else responses_en
        default_responses = default_responses_ru if language == 'ru' else default_responses_en
        
        response_text = None
        for keyword, replies in responses.items():
            if keyword in message:
                response_text = random.choice(replies)
                break
        
        if not response_text:
            response_text = random.choice(default_responses)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'response': response_text,
                'success': True
            })
        }
        
    except json.JSONDecodeError:
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Invalid JSON'})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': f'Server error: {str(e)}'})
        }
